// Copyright 2024 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package grpc_build_v1;

option go_package = "github.com/tsuru/deploy-agent/pkg/build/grpc_build_v1";

service Build {
    // Builds (and pushes) container images.
    rpc Build(BuildRequest) returns (stream BuildResponse) {};
}

message BuildRequest {
  // BuildKind indicates what kind of process started the build on the caller side.
  BuildKind kind = 1;

  // App is the Tsuru app which is being deployed, if any.
  //
  // NOTE: mandatory field when build kind starts with BUILD_KIND_APP_.
  TsuruApp app = 2;

  // Platform is the Tsuru platform which is being builded, if any.
  //
  // NOTE: mandatory field when build kind starts with BUILD_KIND_PLATFORM_.
  TsuruPlatform platform = 3;

  // SourceImage is the source container image name.
  //
  // When deploy is from app's source code (BUILD_KIND_APP_DEPLOY_WITH_SOURCE_UPLOAD), it holds
  // the plataform's container image (e.g. docker.io/tsuru/scratch:latest).
  // When deploy is from container image (BUILD_KIND_APP_DEPLOY_WITH_CONTAINER_IMAGE), it holds
  // the app's container image (e.g. registry.example.com/company/app:v100).
  // Otherwise it's empty.
  string source_image = 4;

  // DestinationImages are the tags of the container image after build.
  repeated string destination_images = 5;

  // Data is the app's source data (or container context).
  // Cannot exceed 2^32 of size.
  //
  // See more: https://developers.google.com/protocol-buffers/docs/proto3#scalar
  bytes data = 6;

  // Containerfile is the container file definition.
  string Containerfile = 7;

  // PushOptions contains the options push the generated images.
  PushOptions push_options = 10;

  // Job is the Tsuru job which is being deployed, if any.
  //
  // NOTE: mandatory field when build kind starts with BUILD_KIND_JOB_.
  TsuruJob job = 11;
}

enum BuildKind {
  option allow_alias = true;

  BUILD_KIND_UNSPECIFIED                     = 0;
  BUILD_KIND_APP_BUILD_WITH_SOURCE_UPLOAD    = 1; // tsuru app build ... /path/to/my/files.sh
  BUILD_KIND_APP_DEPLOY_WITH_SOURCE_UPLOAD   = 1; // tsuru app deploy ... /path/to/my/files.sh
  BUILD_KIND_APP_BUILD_WITH_CONTAINER_IMAGE  = 2; // tsuru app build ... -i registry.example.com/tsuru/my-app:staging
  BUILD_KIND_APP_DEPLOY_WITH_CONTAINER_IMAGE = 2; // tsuru app deploy ... -i registry.example.com/tsuru/my-app:staging
  BUILD_KIND_APP_BUILD_WITH_CONTAINER_FILE   = 3; // tsuru app build ... --dockerfile Dockerfile --dockerfile-context ./
  BUILD_KIND_APP_DEPLOY_WITH_CONTAINER_FILE  = 3; // tsuru app deploy ... --dockerfile Dockerfile --dockerfile-context ./

  BUILD_KIND_PLATFORM_WITH_CONTAINER_IMAGE   = 5; // tsuru platform add/update ... -i registry.example.com/tsuru/python:latest
  BUILD_KIND_PLATFORM_WITH_CONTAINER_FILE    = 6; // tsuru platform add/update ... --dockerfile Dockerfile

  BUILD_KIND_JOB_CREATE_WITH_CONTAINER_IMAGE = 7; // tsuru job create ... -i registry.example.com/tsuru/my-job:latest
  BUILD_KIND_JOB_DEPLOY_WITH_CONTAINER_IMAGE = 7; // tsuru job deploy ... -i registry.example.com/tsuru/my-job:latest
	BUILD_KIND_JOB_DEPLOY_WITH_CONTAINER_FILE  = 8; // tsuru job deploy ... --dockerfile Dockerfile
}

message BuildResponse {
  oneof data {
    // Output is the progress messages during the build and push phase.
    string output = 1;
    // TsuruConfig is the configuration of the application.
    TsuruConfig tsuru_config = 2;
  }
}

message TsuruApp {
  // Name is the Tsuru app name.
  string name = 1;
  // EnvVars are the enviroment variables set on app.
  map<string, string> env_vars = 3;
}

message TsuruJob {
  // Name is the Tsuru job name.
  string name = 1;
  // EnvVars are the enviroment variables set on the job.
  map<string, string> env_vars = 3;
}

message TsuruPlatform {
  // Name is the Tsuru platform name.
  string name = 1;
}

message PushOptions {
  // Disable turns off the push for container registry.
  bool disable = 1;
  // InsecureRegistry allows sending an image to registry running in plain HTTP.
  bool insecure_registry = 2;
}

message ContainerImageConfig {
  repeated string entrypoint = 1;
  repeated string cmd = 2;
  repeated string exposed_ports = 3;
  string working_dir = 4;
}

message TsuruConfig {
  // Procfile definition found during the build.
  string procfile = 1;
  // TsuruYAML definition found during the build.
  string tsuru_yaml = 2;
  // ContainerImageConfig found in the container image registry.
  ContainerImageConfig image_config = 3;
}
